name: Build

on:
  push:
  pull_request: # For releasing only
    branches:
      - master
    types:
      - closed

defaults:
  runs-on: ubuntu-latest

env:
  # Check if we are in a Release workflow
  IS_RELEASE: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged }}

jobs:
  build:
    name: Build and Lint
    timeout-minutes: 10
    steps:
      # Checks-out the Repository
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Required to retrieve git history (for Chromatic)
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn modules cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install node_modules
        run: yarn install --frozen-lockfile
      - name: Build
        run: yarn build
      - name: Lint
        run: yarn lint
        if: ${{ env.IS_RELEASE == false }} # Skip for releases, as linting has already been performed
      - name: Deploy to Chromatic
        uses: chromaui/action@v1
        if: ${{ env.IS_RELEASE == false }} # Skip for releases, as Chromatic build was already performed
        with:
          projectToken: t00yilwkcv
          token: ${{ secrets.GITHUB_TOKEN }}
          # Automatically Accept changes on first-level branches (develop, master), as they are protected
          # See https://www.chromatic.com/docs/ci#maintain-a-clean-master-branch
          autoAcceptChanges: '*'

      # Releasing Steps
      # Step needed to extract release version from branch name
      - name: Extract Release Version
        id: extract_version
        if: ${{ env.IS_RELEASE == true }}
        env:
          RELEASE_BRANCH: ${{ github.event.pull_request.head.ref }}
        run: echo "##[set-output name=version;]$(echo ${RELEASE_BRANCH#release/})"

      - name: Publish to NPM
        run: yarn publish
        if: ${{ env.IS_RELEASE == true }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: ${{ env.IS_RELEASE == true }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ github.event.pull_request.title }}
          body: ${{github.event.pull_request.body}}
          tag_name: ${{ steps.extract_version.outputs.version }}
          prerelease: false
